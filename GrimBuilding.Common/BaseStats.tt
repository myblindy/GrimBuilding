<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    var stats = new List<(string type, string name, string comment)>();

    void Stat(string type, string name, string comment = null)
    {
        stats.Add((type, name, comment));
    }

    void OffensiveStat(string name)
    {
        Stat("double", $"Offensive{name}Modifier", $"Increases damage done with {name} by this %.");

        if(name.EndsWith("Dot"))
        {
            Stat("double", $"Offensive{name}Duration", $"Deals the {name} damage over this duration.");
            Stat("double", $"Offensive{name}TickDamage", $"Deals this {name} damage per tick over its duration.");
        }
        else
        {
            Stat("double", $"Offensive{name}BaseMin", $"Minimum damage dealt as {name}.");
            Stat("double", $"Offensive{name}BaseMax", $"Maximum damage dealt as {name}. If 0, it's not a range, use only <see cref=\"Offensive{name}BaseMin\"/>.");
        }
    }

    void ResistStat(string name)
    {
        Stat("double", $"Resist{name}", $"Increases resistance against {name} damage.");
        Stat("double", $"MaxResist{name}", $"Deals the maximum resistance against {name} damage.");
    }

    Stat("int", "LevelRequirement"); 
    Stat("double", "PhysiqueRequirement");
    Stat("double", "CunningRequirement");
    Stat("double", "SpiritRequirement");

    Stat("double", "Life");
    Stat("double", "LifeModifier");
    Stat("double", "LifeRegeneration");
    Stat("double", "LifeRegenerationModifier");

    Stat("double", "Energy");
    Stat("double", "EnergyModifier");
    Stat("double", "EnergyRegeneration");
    Stat("double", "EnergyRegenerationModifier");

    Stat("double", "Physique");
    Stat("double", "PhysiqueModifier");
    Stat("double", "Cunning");
    Stat("double", "CunningModifier");
    Stat("double", "Spirit");
    Stat("double", "SpiritModifier");

    Stat("double", "Armor");
    Stat("double", "ArmorChance");
    Stat("double", "ArmorModifier");
    Stat("double", "ArmorModifierChance");

    Stat("double", "ArmorAbsorptionModifier", 
        "Only defensive absorption stat in use, maps to armor absorption %.");

    ResistStat("Physical");
    ResistStat("Pierce");
    ResistStat("Fire");
    ResistStat("Cold");
    ResistStat("Lightning");
    ResistStat("Poison");
    ResistStat("Vitality");
    ResistStat("Aether");
    ResistStat("Chaos");
    ResistStat("Stun");
    Stat("double", "MaxResistAll");
    Stat("double", "ResistElemental");

    Stat("double", "ResistDisruption");
    Stat("double", "ResistBleed");
    Stat("double", "ResistSlow");
    Stat("double", "ResistKnockdown");

    OffensiveStat("Aether");
    OffensiveStat("Chaos");
    OffensiveStat("Cold");
    OffensiveStat("Fire");
    OffensiveStat("Knockdown");
    OffensiveStat("Vitality");
    OffensiveStat("Lightning");
    OffensiveStat("Physical");
    OffensiveStat("Pierce");
    OffensiveStat("Poison");
    OffensiveStat("BleedDot");
    OffensiveStat("ColdDot");
    OffensiveStat("FireDot");
    OffensiveStat("VitalityDot");
    OffensiveStat("LightningDot");
    OffensiveStat("PhysicalDot");
    OffensiveStat("PoisonDot");
    OffensiveStat("Stun");

    Stat("double", "BlockValue");
    Stat("double", "BlockChance");
    Stat("double", "BlockRecoveryTime");
    Stat("double", "ShieldBlockChanceModifier");
    Stat("double", "ShieldDamageBlockModifier");

    Stat("double", "OffensiveAbility");
    Stat("double", "OffensiveAbilityModifier");
    Stat("double", "DefensiveAbility");
    Stat("double", "DefensiveAbilityModifier");

    Stat("double", "AttackSpeedModifier");
    Stat("double", "CastSpeedModifier");
    Stat("double", "SkillCooldownReduction");

    Stat("double", "RunSpeedModifier");

    Stat("double", "AttributeScalePercent");       
#>

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using LiteDB;

namespace GrimBuilding.Common.Support
{
    [GeneratedCode("BaseStats.tt", null)]
    public class BaseStats
    {
        <# foreach(var (type, name, comment) in stats) { #>
            /// <summary> <#= comment ?? "" #> </summary>
            public <#= type #> <#= name #> { get; set; }
        <# } #>

        public List<PlayerSkillAugmentWithQuantity> SkillsWithQuantity { get; set; }

        public void AddFrom(BaseStats other)
        {
            <# foreach(var (type, name, comment) in stats) { #>
                <#= name #> += other.<#= name #>;
            <# } #>

            // add the skills as well
            var otherList = other.SkillsWithQuantity ??= new();
            foreach(var skillWithQuantity in SkillsWithQuantity ??= new())
            {
                var otherSkillWithQuantity = otherList.FirstOrDefault(sq => sq.Skill == skillWithQuantity.Skill);
                if(otherSkillWithQuantity is null)
                    otherList.Add(otherSkillWithQuantity = new PlayerSkillAugmentWithQuantity { Skill = skillWithQuantity.Skill});
                otherSkillWithQuantity.Quantity += skillWithQuantity.Quantity;
            }
        }
    }

    public class PlayerSkillAugmentWithQuantity
    {
        [BsonRef]
        public PlayerSkill Skill { get; set; }
        public int Quantity { get; set; }
    }
}
